package com.aston.trainee;

import java.util.Comparator;

/**
 * Коллекция элементов, расположенных поледовательно. Пользователь может получить
 * доступ к элементам по индексу.
 * Интерфейс предоставляет методы для добавления элементов в конец коллекции,
 * добавления элементов по индексу, получения элементов по индексу, удаления
 * элементов по индексу, удаления всех элементов из коллекции, сортировки
 * коллекции по естественному порядку и при помощи компаратора, преобразования
 * коллекции в массив объектов параметризованного типа.
 *
 * @param <E> - тип элементов в коллекции
 * @author Siarhei Zmushko
 * @version 1.0
 */
public interface CustomArrayList<E> {

    /**
     * Добавляет элемент в конец коллекции.
     *
     * @param element - доавляемый элемент в коллекцию.
     */
    void add(E element);

    /**
     * Вставляет элемент по индексу, при этом, те элементы, индекс которых
     * больше - смещаются на 1 позицию вправо.
     *
     * @param index   - индекс для вставки элемента.
     * @param element - элемент для вставки в коллекцию.
     * @throws IndexOutOfBoundsException - при выходе за пределы массива.
     *                                   (index < 0 || index >= size())
     */
    void add(int index, E element);

    /**
     * Возвращает элемент из коллекции по индексу.
     *
     * @param index - индекс элемента для получения.
     * @return элемент из коллекции по указанному индексу.
     * @throws IndexOutOfBoundsException - при выходе за пределы массива.
     *                                   (index < 0 || index >= size())
     */
    E get(int index);

    /**
     * Удаляет элемент из коллекции с указанным индексом.
     *
     * @param index - индекс элемента для удаления.
     * @return возвращает удаленный элемент.
     * @throws IndexOutOfBoundsException - при выходе за пределы массива.
     *                                   (index < 0 || index >= size())
     */
    E remove(int index);

    /**
     * Очищает коллекцию.
     */
    void clear();

    /**
     * Сортирует эллементы в коллекции в естественном порядке.
     */
    void sort();

    /**
     * Сортирует элементы в коллекции по заданному компаратору.
     *
     * @param comparator - компаратор, задающий порядок сортировки.
     */
    void sort(Comparator<E> comparator);

    /**
     * Преобразует коллекцию в массив.
     *
     * @return массив из элементов коллекции.
     */
    E[] toArray();

    /**
     * Возвращает размер коллекции (количество элементов в коллекции).
     *
     * @return число элементов в коллекции.
     */
    int size();

    /**
     * Заменяет элемент в коллекции с указанным индексом.
     *
     * @param index   - индекс позиции для вставки элемента.
     * @param element - заменяющий элемент.
     * @throws IndexOutOfBoundsException - при выходе за пределы массива.
     *                                   (index < 0 || index >= size())
     */
    void set(int index, E element);
}
